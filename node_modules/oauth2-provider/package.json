{
  "name": "oauth2-provider",
  "version": "1.3.0",
  "description": "A simple customizable OAuth 2.0 provider (server) for node.js.",
  "homepage": "https://github.com/ammmir/node-oauth2-provider",
  "author": {
    "name": "Amir Malik",
    "url": "http://amirmalik.net/"
  },
  "main": "index",
  "dependencies": {
    "serializer": ">=0.0.2 <0.1.0"
  },
  "devDependencies": {
    "mocha": "1.0.3",
    "sinon": "1.3.4",
    "chai": "1.0.3"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/ammmir/node-oauth2-provider/blob/master/LICENSE"
    }
  ],
  "readme": "# OAuth 2 Provider for Connect & Express\n\nThis is a node.js module for implementing OAuth2 servers (providers)\nthat support server-side (code) and client-side (token) OAuth flows.\n\nIt's very customizable, so you can (and currently, must) take care of\nOAuth token storage and client lists. In the future, a Mongo or Redis\nbacked abstraction will be provided so you don't need to care about\nany kind of storage at all.\n\n## Using it with npm\n\nIf you're using this module via npm, please be sure the bracket the\nversion in your app's `package.json` file. Major versions may have an\nincompatible API that's not backwards-compatible, so use a safe version\nrange under `dependencies` (eg. for version 1.x):\n\n    \"oauth2-provider\": \"1.x\"\n\n## Quick Start\n\nInstall via npm:\n\n    npm install oauth2-provider\n\nYou can add it to your Connect or Express application as another middleware.\nBe sure to enable the `bodyParser` and `query` middleware.\n\nThe OAuth2Provider instance providers two middleware:\n\n* `oauth()`: OAuth flow entry and access token generation\n* `login()`: Access control for protected resources\n\nThe most importand event emitted by OAuth2Provider is `access_token`, which\nlets you set up the request as if it were authenticated. For example, to\nsupport both cookie-authenticated and OAuth access to protected URLs, you\ncould populate `req.session.user` so that individual URLs don't need to\ncare about which type of authentication was used.\n\nTo support client authentication (sometimes known as xAuth) for trusted\nclients, handle the `client_auth` event to exchange a username and password\nfor an access token. See `examples/simple_express3.js`.\n\n## Example\n\nIn the root directory, run `npm install express` and then run:\n\n    node examples/simple_express3.js\n\nVisit <http://localhost:8081/login> to gain access to\n<http://localhost:8081/secret> or use OAuth to obtain an access token as a code (default) or a token (in the URL hash):\n\n  - code: <http://localhost:8081/oauth/authorize?client_id=1&redirect_uri=http://myapp.foo/>\n  - token: <http://localhost:8081/oauth/authorize?client_id=1&redirect_uri=http://myapp.foo/&response_type=token>\n\n## Running tests\n\n  Install dev dependencies:\n  \n    $ npm install -d\n\n  Run the tests:\n\n    $ make test\n",
  "readmeFilename": "README.md",
  "_id": "oauth2-provider@1.3.0",
  "_from": "oauth2-provider@~1.3.0"
}
