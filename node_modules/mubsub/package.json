{
  "name": "mubsub",
  "version": "1.0.4",
  "description": "Pub/sub for Node.js and MongoDB",
  "homepage": "http://github.com/scttnlsn/mubsub",
  "author": {
    "name": "Scott Nelson",
    "email": "scottbnel@gmail.com"
  },
  "main": "./lib/index",
  "keywords": [
    "mongodb",
    "pubsub",
    "pub",
    "sub",
    "capped collection"
  ],
  "contributors": [
    {
      "name": "Oleg Slobodskoi",
      "email": "oleg008@gmail.com"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/scttnlsn/mubsub.git"
  },
  "dependencies": {
    "mongodb": "1.3.x"
  },
  "devDependencies": {
    "mocha": ">= 1.0.0"
  },
  "readme": "## mubsub\n\nMubsub is a pub/sub implementation for Node.js and MongoDB.  It utilizes Mongo's capped collections and tailable cursors to notify subscribers of inserted documents that match a given query. You should not create lots of channels, because mubsub will poll from the cursor position.\n\n\n## Example\n\n```javascript\nvar mubsub = require('mubsub');\n\nvar client = mubsub('mongodb://localhost:27017/mubsub_example');\nvar channel = client.channel('test');\n\nclient.on('error', console.error);\nchannel.on('error', console.error);\n\nchannel.subscribe('bar', function(message) {\n    console.log(message.foo); // => 'bar'\n});\n\nchannel.subscribe('baz', function(message) {\n    console.log(message); // => 'baz'\n});\n\nchannel.publish('bar', { foo: 'bar' });\nchannel.publish('baz', 'baz');\n\n```\n\n## Usage\n\n### Create a client\n\nYou can pass a Db instance or a uri string. For more information about uri format visit http://mongodb.github.io/node-mongodb-native/driver-articles/mongoclient.html\n\n```javascript\nvar mubsub = require('mubsub');\n\n// Using uri\nvar client = mubsub('mongodb://localhost:27017/mubsub_example', [options]);\n\n// Pass mongodb driver `Db` instance directly.\nvar client = mubsub(new Db(...));\n```\n\n### Channels\n\nA channel maps one-to-one with a capped collection (Mubsub will create these if they do not already exist in the database).  Optionally specify the byte size of the collection or/and max number of documents in the collection when creating a channel.\n\n```javascript\nvar channel = client.channel('foo', { size: 100000, max: 500 });\n```\n\nOptions:\n\n - `size` max size of the collection in bytes, default is 5mb\n - `max` max amount of documents in the collection\n - `retryInterval` time in ms to wait if no docs found, default is 200ms\n - `recreate` recreate the tailable cursor on error, default is true\n\n\n **Don't remove collections with running publishers. Mongod can recreate the collection on insert automatically before mubsub will do it and without capped = true.**\n\n### Subscribe\n\n```javascript\nvar subscription = channel.subscribe([event], callback);\n```\n\nSubscriptions register a callback to be called whenever a document matching the specified event is inserted (published) into the collection (channel).  You can omit the event to match all inserted documents. To later unsubscribe a particular callback, call `unsubscribe` on the returned subscription object:\n\n```javascript\nsubscription.unsubscribe();\n```\n### Publish\n\n```javascript\nchannel.publish(event, obj, [callback]);\n```\n\nPublishing a document simply inserts the document into the channel's capped collection. Callback is optional.\n\n### Listen to events\n\nFollowing events will be emitted:\n\n```javascript\n\n    // Subscribe to some specicific event, like channel.subscribe\n    channel.on('myevent', console.log);\n\n    // Subscribe to a \"message\"\n    channel.on('message', console.log);\n\n    // Subscribe to \"document\" event to get the entire mongo document.\n    channel.on('document', console.log);\n\n    // Mubsub is ready to receive new documents.\n    channel.on('ready', console.log);\n\n    // Connection errors\n    client.on('error', console.log);\n\n    // Channel errors\n    channel.on('error', console.log);\n\n```\n\n### Close\n\n```javascript\nclient.close();\n```\n\nCloses the MongoDB connection.\n\n## Install\n\n    npm install mubsub\n\n## Tests\n\n    make test\n\nYou can optionally specify the MongoDB URI to be used for tests:\n\n    MONGODB_URI=mongodb://localhost:27017/mubsub_tests make test\n\n## Projects using mubsub\n\n- [simpleio](https://github.com/kof/simpleio) Simple long polling based communication.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/scttnlsn/mubsub/issues"
  },
  "_id": "mubsub@1.0.4",
  "_from": "mubsub@~1.0.4"
}
